/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TaskCategoryService } from "../taskCategory.service";
import { TaskCategoryCreateInput } from "./TaskCategoryCreateInput";
import { TaskCategory } from "./TaskCategory";
import { TaskCategoryFindManyArgs } from "./TaskCategoryFindManyArgs";
import { TaskCategoryWhereUniqueInput } from "./TaskCategoryWhereUniqueInput";
import { TaskCategoryUpdateInput } from "./TaskCategoryUpdateInput";

export class TaskCategoryControllerBase {
  constructor(protected readonly service: TaskCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TaskCategory })
  async createTaskCategory(
    @common.Body() data: TaskCategoryCreateInput
  ): Promise<TaskCategory> {
    return await this.service.createTaskCategory({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TaskCategory] })
  @ApiNestedQuery(TaskCategoryFindManyArgs)
  async taskCategories(
    @common.Req() request: Request
  ): Promise<TaskCategory[]> {
    const args = plainToClass(TaskCategoryFindManyArgs, request.query);
    return this.service.taskCategories({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TaskCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async taskCategory(
    @common.Param() params: TaskCategoryWhereUniqueInput
  ): Promise<TaskCategory | null> {
    const result = await this.service.taskCategory({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TaskCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTaskCategory(
    @common.Param() params: TaskCategoryWhereUniqueInput,
    @common.Body() data: TaskCategoryUpdateInput
  ): Promise<TaskCategory | null> {
    try {
      return await this.service.updateTaskCategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TaskCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTaskCategory(
    @common.Param() params: TaskCategoryWhereUniqueInput
  ): Promise<TaskCategory | null> {
    try {
      return await this.service.deleteTaskCategory({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
