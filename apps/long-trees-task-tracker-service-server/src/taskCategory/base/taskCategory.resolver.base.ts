/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TaskCategory } from "./TaskCategory";
import { TaskCategoryCountArgs } from "./TaskCategoryCountArgs";
import { TaskCategoryFindManyArgs } from "./TaskCategoryFindManyArgs";
import { TaskCategoryFindUniqueArgs } from "./TaskCategoryFindUniqueArgs";
import { CreateTaskCategoryArgs } from "./CreateTaskCategoryArgs";
import { UpdateTaskCategoryArgs } from "./UpdateTaskCategoryArgs";
import { DeleteTaskCategoryArgs } from "./DeleteTaskCategoryArgs";
import { TaskCategoryService } from "../taskCategory.service";
@graphql.Resolver(() => TaskCategory)
export class TaskCategoryResolverBase {
  constructor(protected readonly service: TaskCategoryService) {}

  async _taskCategoriesMeta(
    @graphql.Args() args: TaskCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TaskCategory])
  async taskCategories(
    @graphql.Args() args: TaskCategoryFindManyArgs
  ): Promise<TaskCategory[]> {
    return this.service.taskCategories(args);
  }

  @graphql.Query(() => TaskCategory, { nullable: true })
  async taskCategory(
    @graphql.Args() args: TaskCategoryFindUniqueArgs
  ): Promise<TaskCategory | null> {
    const result = await this.service.taskCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaskCategory)
  async createTaskCategory(
    @graphql.Args() args: CreateTaskCategoryArgs
  ): Promise<TaskCategory> {
    return await this.service.createTaskCategory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TaskCategory)
  async updateTaskCategory(
    @graphql.Args() args: UpdateTaskCategoryArgs
  ): Promise<TaskCategory | null> {
    try {
      return await this.service.updateTaskCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaskCategory)
  async deleteTaskCategory(
    @graphql.Args() args: DeleteTaskCategoryArgs
  ): Promise<TaskCategory | null> {
    try {
      return await this.service.deleteTaskCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
