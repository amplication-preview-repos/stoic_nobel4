/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TaskCategory as PrismaTaskCategory } from "@prisma/client";

export class TaskCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TaskCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.taskCategory.count(args);
  }

  async taskCategories<T extends Prisma.TaskCategoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskCategoryFindManyArgs>
  ): Promise<PrismaTaskCategory[]> {
    return this.prisma.taskCategory.findMany<Prisma.TaskCategoryFindManyArgs>(
      args
    );
  }
  async taskCategory<T extends Prisma.TaskCategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskCategoryFindUniqueArgs>
  ): Promise<PrismaTaskCategory | null> {
    return this.prisma.taskCategory.findUnique(args);
  }
  async createTaskCategory<T extends Prisma.TaskCategoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskCategoryCreateArgs>
  ): Promise<PrismaTaskCategory> {
    return this.prisma.taskCategory.create<T>(args);
  }
  async updateTaskCategory<T extends Prisma.TaskCategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskCategoryUpdateArgs>
  ): Promise<PrismaTaskCategory> {
    return this.prisma.taskCategory.update<T>(args);
  }
  async deleteTaskCategory<T extends Prisma.TaskCategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskCategoryDeleteArgs>
  ): Promise<PrismaTaskCategory> {
    return this.prisma.taskCategory.delete(args);
  }
}
