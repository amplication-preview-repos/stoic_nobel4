/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Note as PrismaNote } from "@prisma/client";

export class NoteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NoteCountArgs, "select">): Promise<number> {
    return this.prisma.note.count(args);
  }

  async notes<T extends Prisma.NoteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NoteFindManyArgs>
  ): Promise<PrismaNote[]> {
    return this.prisma.note.findMany<Prisma.NoteFindManyArgs>(args);
  }
  async note<T extends Prisma.NoteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NoteFindUniqueArgs>
  ): Promise<PrismaNote | null> {
    return this.prisma.note.findUnique(args);
  }
  async createNote<T extends Prisma.NoteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NoteCreateArgs>
  ): Promise<PrismaNote> {
    return this.prisma.note.create<T>(args);
  }
  async updateNote<T extends Prisma.NoteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NoteUpdateArgs>
  ): Promise<PrismaNote> {
    return this.prisma.note.update<T>(args);
  }
  async deleteNote<T extends Prisma.NoteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NoteDeleteArgs>
  ): Promise<PrismaNote> {
    return this.prisma.note.delete(args);
  }
}
